model_path: '/run/media/root/DATA/GxIn_ws/denglin_infer/models/v10m-fs-0703.rlym'
input_shape: #only dynamic network need assigning  a static input shape
  images: 1,3,384,640
input_type: 'img' # assign a input data type which should be included in input_types
input_types:
  random:
    batch_size: 1
    input_min: 0
    input_max: 1.0
    seed: # whether to fix the random input data
  npy:
    npy_inputs_data_dir: './npy_inputs_data' # input_name is file_name
    npy_outputs_data_dir: ''
  img:
    dir: './data/images' # support .jpg .jpeg .png files
    count: -1 # if <=0 or more than img count in img_dir: count == img count in img_dir, and it means batch_size
    img_preprocess_holder_dir: '/run/media/root/DATA/GxIn_ws/denglin/dl_infer_demo/preprocess'

do_compares: 'fp32'# do compare item
# - 'int8'
compare_templates:
  fp32:
    max_batch_size: -1 # if max_batch_size <=0: max_batch_size == batch_size
    weight_share: 'all' # 'all' mean that do not care about how much cluster in this gpu.
    build_set_flag: null # spm_alloc
    threshold: 0.00001
    quantize: null # do not do quantize if it is null
  int8:
    max_batch_size: -1
    weight_share: 'all'
    build_set_flag: null
    threshold: 0.89
    quantize:
      calibrate_mode: "kl_divergence"
      progress_mode: "SAME"
      quantize_add: true
      quantize_pooling: true
      quantize_concat: true
      downcast_pooling: false
      downcast: false
logging:
  format: '%(asctime)s - %(pathname)s[line:%(lineno)d] - %(levelname)s: %(message)s'
  level: 'info'